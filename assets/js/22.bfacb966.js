(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{403:function(_,v,t){"use strict";t.r(v);var o=t(30),e=Object(o.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h1",{attrs:{id:"异步运行时"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#异步运行时"}},[_._v("#")]),_._v(" 异步运行时")]),_._v(" "),v("h2",{attrs:{id:"异步运行时-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#异步运行时-2"}},[_._v("#")]),_._v(" 异步运行时")]),_._v(" "),v("p",[_._v("一个异步运行时主要做以下几件事：")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("管理和调度异步任务 (Futures/Tasks)：")]),_._v(" "),v("p",[_._v('当使用 tokio::spawn 启动一个新的 Future 时，运行时会把它包装成一个 Task，并放入自己的任务队列中等待执行。它会不断地检查哪些任务可以继续执行（即 "ready"），然后调用它们的 poll 方法来推进它们。')])]),_._v(" "),v("li",[v("p",[_._v("处理非阻塞 I/O (Non-Blocking I/O)：")]),_._v(" "),v("p",[_._v("运行时通过底层操作系统提供的机制（如 Linux 的 epoll, macOS 的 kqueue, Windows 的 IOCP）将这些 I/O 操作注册为“感兴趣的事件”。\n当一个 I/O 操作（比如网络数据包到达）准备好时，操作系统会通知运行时，然后运行时就知道哪个等待这个事件的任务可以被唤醒并继续执行了。")])]),_._v(" "),v("li",[v("p",[_._v("管理计时器 (Timers)：")]),_._v(" "),v("p",[_._v("运行时内部会维护一个有序的计时器队列。当一个 sleep 任务被安排时，运行时会记录下它需要唤醒的时间。当时间到达时，运行时会唤醒相应的任务。")])]),_._v(" "),v("li",[v("p",[_._v("提供线程池 (Thread Pool)：")]),_._v(" "),v("p",[_._v("虽然异步代码的目的是避免阻塞，但有时仍然需要执行一些 CPU 密集型任务或必须使用阻塞式 API 的操作（例如，进行复杂的加密计算，或者调用一些老旧的同步 C 库）。\nTokio 提供 tokio::task::spawn_blocking 这样的机制，可以将这些阻塞性任务提交到一个单独的线程池中执行，而不会阻塞主异步运行时所在的线程。")])]),_._v(" "),v("li",[v("p",[_._v("资源管理与错误处理：")]),_._v(" "),v("p",[_._v("协助管理异步任务的生命周期，例如当一个任务被取消时，清理相关资源。提供结构化的错误处理机制，例如通过 Result 类型传播异步操作的错误。")])])]),_._v(" "),v("h2",{attrs:{id:"异步运行时底层支持-future-waker-eventloop-i-o-multiplexing"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#异步运行时底层支持-future-waker-eventloop-i-o-multiplexing"}},[_._v("#")]),_._v(" 异步运行时底层支持（Future，Waker，EventLoop，I/O Multiplexing）")]),_._v(" "),v("h3",{attrs:{id:"future"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#future"}},[_._v("#")]),_._v(" Future")]),_._v(" "),v("p",[_._v("这是 Rust 异步编程的基本构建块。一个 async fn 编译后会生成一个实现了 Future trait 的状态机。")]),_._v(" "),v("p",[_._v("Future trait 定义了一个核心方法：poll。")]),_._v(" "),v("p",[_._v("Rust 中的 poll 方法的签名是\n"),v("code",[_._v("fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output>;")])]),_._v(" "),v("p",[_._v("Poll::Ready(value)： 表示 Future 已经完成，并返回了结果 value。")]),_._v(" "),v("p",[_._v("Poll::Pending： 表示 Future 尚未完成，需要等待某个条件（例如 I/O 完成或计时器到期）才能继续。当返回 Pending 时，Future 必须确保在条件满足时，通过 Waker 机制通知运行时来再次 poll 自己。")]),_._v(" "),v("h3",{attrs:{id:"waker"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#waker"}},[_._v("#")]),_._v(" Waker")]),_._v(" "),v("p",[_._v("这是异步运行时能够“唤醒”一个 Pending 的 Future 的关键机制。")]),_._v(" "),v("p",[_._v("当一个 Future 在 poll 方法中返回 Pending 时，它会通过 Context 获取到一个 Waker 的副本（以及注册感兴趣的事件）。这个 Waker 可以被存储起来（例如，存储在一个 I/O 事件的注册表中）。")]),_._v(" "),v("p",[_._v("当外部事件（如操作系统通知网络数据已到达，或者计时器到期）发生时，对应的 Waker 会被调用其 wake() 方法。wake() 方法会通知运行时：那个关联的 Future 现在可能已经准备好再次被 poll 了，把它放回任务队列中。")]),_._v(" "),v("h3",{attrs:{id:"context"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#context"}},[_._v("#")]),_._v(" Context")]),_._v(" "),v("p",[_._v("Context 对象在 poll 方法中传递，它包含了当前 Future 的 Waker。它允许 Future 在返回 Pending 之前，将自己的 Waker 注册到某个地方，以便在条件满足时被唤醒。")]),_._v(" "),v("h3",{attrs:{id:"底层运行机制-以-tokio-为例"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#底层运行机制-以-tokio-为例"}},[_._v("#")]),_._v(" 底层运行机制（以 Tokio 为例）：")]),_._v(" "),v("h4",{attrs:{id:"任务封装-task"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#任务封装-task"}},[_._v("#")]),_._v(" 任务封装 (Task)：")]),_._v(" "),v("p",[_._v("当调用 tokio::spawn(my_async_op()) 时，my_async_op() 返回的 Future 会被 Tokio 运行时包装成一个内部的 Task 结构。这个 Task 包含 Future 本身以及一个唯一的 ID 或指针。")]),_._v(" "),v("p",[_._v("这个 Task 被放入一个就绪队列 (Ready Queue)。")]),_._v(" "),v("h4",{attrs:{id:"事件循环-event-loop"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#事件循环-event-loop"}},[_._v("#")]),_._v(" 事件循环 (Event Loop)：")]),_._v(" "),v("p",[_._v("Tokio 运行时的一个或多个工作线程 (worker threads) 会运行一个无限循环，这就是事件循环。\n在每个循环迭代中，它会做几件事：")]),_._v(" "),v("ol",[v("li",[v("p",[_._v("从就绪队列中取出任务： 运行时会从就绪队列中弹出一个 Task。")])]),_._v(" "),v("li",[v("p",[_._v("驱动任务： 运行时会调用这个 Task 内部 Future 的 poll 方法。")]),_._v(" "),v("p",[_._v("如果 poll 返回 Poll::Ready(value)，任务完成，其结果被处理，Task 资源被清理。\n如果 poll 返回 Poll::Pending，说明任务暂时无法继续。此时，Future 内部已经将自身的 Waker 注册到了它所等待的资源（如网络套接字、计时器）上。该任务会被暂时移除出就绪队列。")])]),_._v(" "),v("li",[v("p",[_._v("等待事件：\n如果就绪队列为空，或者所有当前的 Future 都返回了 Pending，运行时会进入一个阻塞状态，等待操作系统通知有新的 I/O 事件发生，或者等待下一个计时器事件到期。这是通过 I/O 多路复用 机制实现的（如 epoll_wait, kqueue, GetQueuedCompletionStatus）。")])]),_._v(" "),v("li",[v("p",[_._v("处理事件并唤醒任务：\n当操作系统通知有 I/O 事件发生时，运行时会通过事先存储的 Waker 找到对应的 Task，调用其 wake() 方法。这个 wake() 调用会把 Task 重新放回就绪队列中，等待在下一个循环迭代中被 poll。")])])]),_._v(" "),v("h4",{attrs:{id:"i-o-多路复用-i-o-multiplexing"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#i-o-多路复用-i-o-multiplexing"}},[_._v("#")]),_._v(" I/O 多路复用 (I/O Multiplexing)：")]),_._v(" "),v("p",[_._v("这是高效处理大量并发 I/O 的关键。运行时不是为每个连接或文件打开一个线程，而是使用一个单独的机制（如 epoll）来同时监控成千上万个 I/O 句柄。")]),_._v(" "),v("p",[_._v("例如，当一个 TCP socket 上有数据可读时，epoll 会通知运行时，然后运行时就知道哪个 Future 正在等待这个 socket 的数据，并唤醒它。")]),_._v(" "),v("h4",{attrs:{id:"计时器驱动-timer-driver"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#计时器驱动-timer-driver"}},[_._v("#")]),_._v(" 计时器驱动 (Timer Driver)：")]),_._v(" "),v("p",[_._v("Tokio 内部有一个高效的计时器轮 (timer wheel) 或类似的结构来管理大量的 tokio::time::sleep() 调用。")]),_._v(" "),v("p",[_._v("当 sleep 到期时，计时器驱动会唤醒相应的 Task。")]),_._v(" "),v("h4",{attrs:{id:"工作线程池-worker-thread-pool"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#工作线程池-worker-thread-pool"}},[_._v("#")]),_._v(" 工作线程池 (Worker Thread Pool)：")]),_._v(" "),v("p",[_._v("Tokio 默认会启动一个由多个操作系统线程组成的工作线程池。每个线程都运行自己的事件循环。")]),_._v(" "),v("p",[_._v("这使得 Tokio 可以在多核 CPU 上实现真正的并行度。任务可以被调度到任何一个空闲的工作线程上执行。")]),_._v(" "),v("p",[_._v("tokio::task::spawn_blocking 则是将阻塞任务提交到一个单独的阻塞线程池中，确保这些阻塞操作不会影响主事件循环的响应性。")]),_._v(" "),v("h2",{attrs:{id:"对-tokio-的大概理解"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#对-tokio-的大概理解"}},[_._v("#")]),_._v(" 对 Tokio 的大概理解")]),_._v(" "),v("p",[_._v("简单看来，tokio 就像是使用了 rust 的语言特性，包装了系统底层的 io 多路复用机制，然后向上层提供异步服务而已？")]),_._v(" "),v("p",[_._v("这个理解从一定程度上来说是正确的，但 tokio 不只是一个简单的“包装”，而是一个提供了许多关键组件来实现上述功能的完整、强大且易于使用的异步运行时")]),_._v(" "),v("p",[v("strong",[_._v("顶层：用户友好的异步 API (User-Friendly Async APIs)")])]),_._v(" "),v("p",[_._v("这是直接使用的部分，例如 "),v("code",[_._v("tokio::spawn")]),_._v(", "),v("code",[_._v("tokio::net::TcpStream")]),_._v(", "),v("code",[_._v("tokio::sync::Mutex")]),_._v(" 等。它们遵循 Rust 的 "),v("code",[_._v("async/await")]),_._v(" 语法，能够编写看似同步的异步代码。")]),_._v(" "),v("p",[v("strong",[_._v("中层：Tokio 运行时 (The Tokio Runtime)")])]),_._v(" "),v("ul",[v("li",[v("p",[_._v("调度器 (Scheduler): 这是 Tokio 最复杂的部分之一。它负责管理成千上万的异步任务（Task），决定下一个应该执行哪个任务。它还实现了工作窃取 (work-stealing) 算法，使得在多线程模式下，空闲的工作线程可以从繁忙的线程那里“窃取”任务来执行，从而最大化 CPU 利用率。")])]),_._v(" "),v("li",[v("p",[_._v("计时器系统 (Timer System): 提供 tokio::time::sleep 等功能，下面会详细讲。")])]),_._v(" "),v("li",[v("p",[_._v("异步原语 (Async Primitives): 提供了专门为异步环境设计的同步工具，如 Mutex, Semaphore, Channels (mpsc, oneshot 等)。")])]),_._v(" "),v("li",[v("p",[_._v("阻塞任务处理器 (Blocking Task Handler): 通过 spawn_blocking 将会阻塞线程的代码移到专用的线程池，防止其“毒害”主事件循环。")])])]),_._v(" "),v("p",[v("strong",[_._v("底层：对操作系统 API 的抽象 (OS API Abstraction)")])]),_._v(" "),v("p",[_._v("Tokio 封装了不同操作系统提供的 I/O 多路复用机制：")]),_._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[_._v("Linux: epoll\nmacOS / BSD: kqueue\nWindows: IOCP (I/O Completion Ports)\n")])])]),v("p",[_._v("mio 提供了一个统一的、跨平台的、底层的 API。Tokio 在此基础上构建其 I/O 驱动，当 mio 报告某个 I/O 句柄（如一个网络套接字）准备好读或写时，Tokio 就会唤醒等待这个事件的那个异步任务。")]),_._v(" "),v("h2",{attrs:{id:"一些细节"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一些细节"}},[_._v("#")]),_._v(" 一些细节")]),_._v(" "),v("h3",{attrs:{id:"一些在标准库的实现-在-tokio-中有另一个版本-为什么-比如-std-mutex-和-tokio-mutex"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一些在标准库的实现-在-tokio-中有另一个版本-为什么-比如-std-mutex-和-tokio-mutex"}},[_._v("#")]),_._v(" 一些在标准库的实现，在 tokio 中有另一个版本，为什么？(比如 std::mutex 和 tokio::mutex)")]),_._v(" "),v("p",[v("strong",[_._v("最大的区别在于当锁已经被持有时，另一个任务尝试获取锁的行为。")])]),_._v(" "),v("ul",[v("li",[v("strong",[v("code",[_._v("std::sync::Mutex")]),_._v(" 会阻塞当前线程 (Thread)。")])]),_._v(" "),v("li",[v("strong",[v("code",[_._v("tokio::sync::Mutex")]),_._v(" 会让出当前任务 (Task) 的执行权，但不会阻塞线程。")])])]),_._v(" "),v("h4",{attrs:{id:"行为对比"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#行为对比"}},[_._v("#")]),_._v(" 行为对比")]),_._v(" "),v("table",[v("thead",[v("tr",[v("th",{staticStyle:{"text-align":"left"}},[_._v("特性")]),_._v(" "),v("th",{staticStyle:{"text-align":"left"}},[v("code",[_._v("std::sync::Mutex")]),_._v(" (标准库锁)")]),_._v(" "),v("th",{staticStyle:{"text-align":"left"}},[v("code",[_._v("tokio::sync::Mutex")]),_._v(" (Tokio 异步锁)")])])]),_._v(" "),v("tbody",[v("tr",[v("td",{staticStyle:{"text-align":"left"}},[v("strong",[_._v("主要用途")])]),_._v(" "),v("td",{staticStyle:{"text-align":"left"}},[_._v("在多"),v("strong",[_._v("线程 (Thread)")]),_._v(" 环境下保护共享数据。")]),_._v(" "),v("td",{staticStyle:{"text-align":"left"}},[_._v("在多"),v("strong",[_._v("任务 (Task)")]),_._v(" 环境下保护共享数据，专为 "),v("code",[_._v("async")]),_._v(" 代码设计。")])]),_._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[v("strong",[_._v("获取锁的方式")])]),_._v(" "),v("td",{staticStyle:{"text-align":"left"}},[v("code",[_._v("let guard = my_mutex.lock().unwrap();")])]),_._v(" "),v("td",{staticStyle:{"text-align":"left"}},[v("code",[_._v("let guard = my_mutex.lock().await;")])])]),_._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[v("strong",[_._v("当锁被占用时")])]),_._v(" "),v("td",{staticStyle:{"text-align":"left"}},[v("strong",[_._v("阻塞当前线程")]),_._v("。操作系统会挂起整个线程，直到锁被释放。线程在此期间无法做任何其他事情。")]),_._v(" "),v("td",{staticStyle:{"text-align":"left"}},[v("strong",[_._v("异步地等待")]),_._v("。当前任务返回 "),v("code",[_._v("Poll::Pending")]),_._v("，并被“挂起”。运行时（Tokio）会"),v("strong",[_._v("切换去执行其他就绪的任务")]),_._v("。当锁被释放时，运行时会唤醒这个任务，让它重新尝试获取锁。")])]),_._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[v("strong",[_._v("对异步运行时的影响")])]),_._v(" "),v("td",{staticStyle:{"text-align":"left"}},[v("strong",[_._v("灾难性的")]),_._v("。如果在一个异步 worker 线程上使用并发生争用，整个线程都会被冻结。这个线程上成百上千个其他的异步任务都会被卡住，无法取得任何进展。")]),_._v(" "),v("td",{staticStyle:{"text-align":"left"}},[v("strong",[_._v("和谐的")]),_._v("。它遵循了异步的“协作式”调度原则。任务只是暂停，线程本身仍然是活跃的，可以继续去处理其他成千上万个任务，最大化了线程的利用率。")])]),_._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[v("strong",[_._v("是否可以跨 "),v("code",[_._v(".await")])])]),_._v(" "),v("td",{staticStyle:{"text-align":"left"}},[v("strong",[_._v("绝对不能")]),_._v("。在持有 "),v("code",[_._v("std::sync::MutexGuard")]),_._v(" 的作用域内进行 "),v("code",[_._v(".await")]),_._v(" 是非常危险的，极易导致"),v("strong",[_._v("死锁")]),_._v("。")]),_._v(" "),v("td",{staticStyle:{"text-align":"left"}},[v("strong",[_._v("完全可以")]),_._v("。这正是它设计的目的。你可以在获取锁后安全地执行 "),v("code",[_._v(".await")]),_._v(" 操作，因为锁的 "),v("code",[_._v("Guard")]),_._v(" 是 "),v("code",[_._v("Send")]),_._v(" 的。")])])])]),_._v(" "),v("h4",{attrs:{id:"为什么-std-sync-mutex-在异步代码中是危险的"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#为什么-std-sync-mutex-在异步代码中是危险的"}},[_._v("#")]),_._v(" 为什么 "),v("code",[_._v("std::sync::Mutex")]),_._v(" 在异步代码中是危险的？")]),_._v(" "),v("p",[_._v("假设在一个 Tokio worker 线程上：")]),_._v(" "),v("ol",[v("li",[v("code",[_._v("任务1")]),_._v(" 获取了 "),v("code",[_._v("std::sync::Mutex")]),_._v(" 的锁。")]),_._v(" "),v("li",[v("code",[_._v("任务1")]),_._v(" 执行了一个 "),v("code",[_._v(".await")]),_._v(" 操作（比如 "),v("code",[_._v("tokio::time::sleep(..).await")]),_._v("），这导致它自己被挂起，并将线程的控制权交还给 Tokio 运行时。")]),_._v(" "),v("li",[_._v("Tokio 运行时发现 "),v("code",[_._v("任务2")]),_._v(" 已经就绪，于是在同一个线程上开始执行 "),v("code",[_._v("任务2")]),_._v("。")]),_._v(" "),v("li",[v("code",[_._v("任务2")]),_._v(" 也尝试去获取同一个 "),v("code",[_._v("std::sync::Mutex")]),_._v(" 的锁。")]),_._v(" "),v("li",[_._v("因为这个锁已经被 "),v("code",[_._v("任务1")]),_._v(" 持有，所以 "),v("code",[_._v("任务2")]),_._v(" 会"),v("strong",[_._v("阻塞整个线程")]),_._v("。")]),_._v(" "),v("li",[_._v("现在，线程被完全阻塞了。这意味着 Tokio 运行时无法再轮询任何任务，包括那个持有锁并且需要被唤醒才能释放锁的 "),v("code",[_._v("任务1")]),_._v("。")]),_._v(" "),v("li",[v("code",[_._v("任务1")]),_._v(" 永远等不到被唤醒，"),v("code",[_._v("任务2")]),_._v(" 永远在阻塞等待，死锁发生。")])]),_._v(" "),v("h4",{attrs:{id:"何时可以使用-std-sync-mutex"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#何时可以使用-std-sync-mutex"}},[_._v("#")]),_._v(" 何时可以使用 "),v("code",[_._v("std::sync::Mutex")]),_._v("？")]),_._v(" "),v("p",[_._v("尽管在 "),v("code",[_._v("async")]),_._v(" 函数内部直接使用 "),v("code",[_._v("std::sync::Mutex")]),_._v(" 并跨 "),v("code",[_._v("await")]),_._v(" 是危险的，但它在某些情况下仍然有用：")]),_._v(" "),v("ol",[v("li",[v("p",[v("strong",[_._v("在不包含 "),v("code",[_._v(".await")]),_._v(" 的临界区：")]),_._v(" 如果你只是想保护一小段纯 CPU 计算的代码，并且确信在这段代码中绝对不会有 "),v("code",[_._v(".await")]),_._v("，那么使用 "),v("code",[_._v("std::sync::Mutex")]),_._v(" 是可以的，而且它的性能开销通常比 "),v("code",[_._v("tokio::sync::Mutex")]),_._v(" 更低。但为了代码风格的一致性和安全，通常还是推荐使用 "),v("code",[_._v("tokio")]),_._v(" 的版本。")])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("在 "),v("code",[_._v("tokio::task::spawn_blocking")]),_._v(" 中：")]),_._v(" 当你需要与阻塞的、非异步的代码（比如一个传统的数据库驱动）交互时，你会使用 "),v("code",[_._v("spawn_blocking")]),_._v("。在这个闭包内部，你完全处于一个同步的上下文中，因此应该使用 "),v("code",[_._v("std::sync::Mutex")]),_._v(" 来和其他同步代码进行交互。")])])]),_._v(" "),v("h4",{attrs:{id:"注意-获取异步锁之后陷入睡眠是不会释放这个锁的"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#注意-获取异步锁之后陷入睡眠是不会释放这个锁的"}},[_._v("#")]),_._v(" 注意，获取异步锁之后陷入睡眠是不会释放这个锁的")]),_._v(" "),v("p",[v("strong",[_._v("任务获取 Tokio 的异步锁 ("),v("code",[_._v("tokio::sync::Mutex")]),_._v(") 后，即使 "),v("code",[_._v("await")]),_._v(" 陷入睡眠（或者等待 I/O），这个锁仍然是被持有的，不会被释放。")])]),_._v(" "),v("p",[_._v("这正是 "),v("code",[_._v("tokio::sync::Mutex")]),_._v(" 的核心设计目标之一："),v("strong",[_._v("允许在持有锁的同时执行异步操作。")])]),_._v(" "),v("p",[_._v("工作原理：")]),_._v(" "),v("ol",[v("li",[v("strong",[_._v("任务 A 尝试获取锁：")]),_._v(" "),v("code",[_._v("let _guard = my_mutex.lock().await;")])]),_._v(" "),v("li",[v("strong",[_._v("获取成功：")]),_._v(" "),v("code",[_._v("_guard")]),_._v(" 被创建，锁被任务 A 持有。")]),_._v(" "),v("li",[v("strong",[_._v("任务 A 执行异步操作：")]),_._v(" "),v("code",[_._v("some_async_op().await;")]),_._v(" "),v("ul",[v("li",[_._v("在 "),v("code",[_._v("await")]),_._v(" 点，任务 A 会返回 "),v("code",[_._v("Poll::Pending")]),_._v(" 给 Tokio 运行时。")]),_._v(" "),v("li",[v("strong",[_._v("关键点：")]),_._v(" 任务 A 自己被挂起，但它仍然是锁的持有者。这个锁并没有被释放。")]),_._v(" "),v("li",[_._v("Tokio 运行时发现任务 A 挂起了，就会转去执行就绪队列中的其他任务（任务 B, C, D 等）。")]),_._v(" "),v("li",[_._v("这期间，如果其他任务（比如任务 B）也尝试获取同一个 "),v("code",[_._v("my_mutex")]),_._v(" 的锁，它也会遇到锁被持有的情况，然后 "),v("code",[_._v("lock().await")]),_._v(" 也会返回 "),v("code",[_._v("Poll::Pending")]),_._v("，任务 B 也会被挂起。")])])]),_._v(" "),v("li",[v("strong",[_._v("异步操作完成：")]),_._v(" "),v("code",[_._v("some_async_op()")]),_._v(" 完成后，Tokio 运行时会唤醒任务 A。")]),_._v(" "),v("li",[v("strong",[_._v("任务 A 继续执行：")]),_._v(" 任务 A 会从它上次暂停的地方继续执行，"),v("code",[_._v("_guard")]),_._v(" 仍然有效。")]),_._v(" "),v("li",[v("strong",[_._v("任务 A 完成锁保护的临界区：")]),_._v(" 当 "),v("code",[_._v("_guard")]),_._v(" 超出作用域时（或者手动 "),v("code",[_._v("drop")]),_._v("），锁才会被释放。")])]),_._v(" "),v("p",[v("strong",[_._v("但要注意：")]),_._v("\n尽管锁在 "),v("code",[_._v("await")]),_._v(" 期间不会释放，并且线程不会阻塞，仍然需要警惕持有锁时间过长可能带来的"),v("strong",[_._v("争用问题")]),_._v("。如果一个任务长时间持有异步锁，其他等待这个锁的任务仍然会长时间处于挂起状态，这会影响程序的并发性能。所以，最佳实践仍然是尽可能地缩短临界区（持有锁的代码块）。")]),_._v(" "),v("h4",{attrs:{id:"为什么-guard-需要实现send-trait"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#为什么-guard-需要实现send-trait"}},[_._v("#")]),_._v(" 为什么 guard 需要实现"),v("code",[_._v("Send")]),_._v(" trait")]),_._v(" "),v("p",[_._v("当一个任务在一个线程上面执行的时候，他获取了分布锁，并且由于其他的阻塞操作陷入睡眠，但是并没有释放这个锁，后续这个任务可能在其他工作线程上面唤醒继续执行，这就需要这个 guard 可以支持在线程剑传递，因此需要"),v("code",[_._v("Send")])]),_._v(" "),v("h3",{attrs:{id:"tokio-的计时器机制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tokio-的计时器机制"}},[_._v("#")]),_._v(" tokio 的计时器机制")]),_._v(" "),v("p",[_._v("Tokio 的计时器机制是一个非常高效的系统，旨在以最小的开销管理可能存在的成千上万个计时器。它"),v("strong",[_._v("不会")]),_._v("为每个计时器创建一个线程，也"),v("strong",[_._v("不会")]),_._v("在一个循环里遍历一个巨大的计时器列表来检查谁到期了。")]),_._v(" "),v("p",[_._v("它使用的核心数据结构是"),v("strong",[_._v("分层时间轮 (Hierarchical Timing Wheel)")]),_._v("。")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("第 1 层（秒轮）：")]),_._v(" 一个有 64 个槽（Slot）的轮子。每个槽代表一个时间单位（比如 1 毫秒）。这个轮子能表示接下来的 64 毫秒。")]),_._v(" "),v("li",[v("strong",[_._v("第 2 层（分轮）：")]),_._v(" 同样有 64 个槽的轮子。当第一层的轮子转完一整圈（64 毫秒）后，第二层的轮子前进一个槽。所以第二层的每个槽代表 64 毫秒。它能表示 "),v("code",[_._v("64 * 64 = 4096")]),_._v(" 毫秒。")]),_._v(" "),v("li",[v("strong",[_._v("第 3 层（时轮）：")]),_._v(" 以此类推，当第二层转完一圈，第三层前进一格。")])]),_._v(" "),v("p",[v("strong",[_._v("工作流程如下：")])]),_._v(" "),v("ol",[v("li",[v("p",[v("strong",[_._v("添加计时器 ("),v("code",[_._v("tokio::time::sleep")]),_._v(")")])]),_._v(" "),v("ul",[v("li",[_._v("当调用 "),v("code",[_._v("tokio::time::sleep(Duration::from_millis(100))")]),_._v(" 时，Tokio 运行时会计算出这个计时器应该在未来的哪个时间点被唤醒。")]),_._v(" "),v("li",[_._v("它会根据这个时间点，将这个计时器（实际上是关联到这个 "),v("code",[_._v("sleep")]),_._v(" 任务的 "),v("code",[_._v("Waker")]),_._v("）放到时间轮上合适的槽里。")]),_._v(" "),v("li",[_._v("例如，如果当前时间在第 1 轮的第 5 槽，那么 100 毫秒后应该是在 "),v("code",[_._v("(5 + 100) % 64 = 41")]),_._v("，但因为超过了 64，所以它会被放到第 2 轮的 "),v("code",[_._v("(100 / 64) = 1")]),_._v(" 号槽，并记录余数。")])])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("计时器驱动 (Timer Driver) 前进")])]),_._v(" "),v("ul",[v("li",[_._v("Tokio 的运行时有一个内部的“心跳”或“滴答”(tick)。它会定期检查当前时间。")]),_._v(" "),v("li",[_._v("它只需要检查"),v("strong",[_._v("当前时间指针指向的那个槽")]),_._v("。例如，时间前进了 1 毫秒，驱动就将指针从第 1 轮的第 5 槽移动到第 6 槽。")])])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("计时器到期")])]),_._v(" "),v("ul",[v("li",[_._v("当驱动移动到某个槽时，它会检查这个槽里是否存放了计时器。")]),_._v(" "),v("li",[_._v("如果槽里有计时器，说明它们已经到期了。")]),_._v(" "),v("li",[_._v("驱动会取出这些计时器对应的 "),v("code",[_._v("Waker")]),_._v("，并调用它们的 "),v("code",[_._v("wake()")]),_._v(" 方法。")]),_._v(" "),v("li",[v("code",[_._v("wake()")]),_._v(" 方法会通知 Tokio 的调度器：这些任务现在已经就绪，可以放回就绪队列等待执行了。")])])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("处理长延时 (Cascading / 级联)")])]),_._v(" "),v("ul",[v("li",[_._v("如果设置一个很长的 "),v("code",[_._v("sleep")]),_._v("（比如 5 秒），它会被直接放到更高层级的轮子中（比如第 3 层或第 4 层）。")]),_._v(" "),v("li",[_._v("当低层级的轮子转完一整圈时，它会检查高一级轮子的下一个槽。如果那个槽里有计时器，它会把这些计时器“重新计算”并“降级”安放到下一层的轮子中。这个过程称为"),v("strong",[_._v("级联")]),_._v("。")])])])]),_._v(" "),v("p",[v("strong",[_._v("这种机制的优势：")])]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("极高的效率 (O(1) 复杂度):")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("添加计时器")]),_._v("的操作是 O(1) 的，因为它只需要做一次计算就知道该放在哪个槽。")]),_._v(" "),v("li",[v("strong",[_._v("检查到期计时器")]),_._v("的操作也是 O(1) 的，因为它只需要看当前时间指针指向的那个槽，完全不需要遍历所有计时器。")])])]),_._v(" "),v("li",[v("strong",[_._v("可扩展性强:")]),_._v(" 能够以非常低的 CPU 开销同时管理数百万个计时器。")])]),_._v(" "),v("h3",{attrs:{id:"tokio-的调度器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tokio-的调度器"}},[_._v("#")]),_._v(" tokio 的调度器")]),_._v(" "),v("p",[_._v("Tokio 的调度器是其核心的“大脑”，负责决定在哪个线程上、在什么时候、运行哪个异步任务。它的设计目标是"),v("strong",[_._v("高性能、低延迟和公平性")]),_._v("。")]),_._v(" "),v("p",[_._v("Tokio "),v("strong",[_._v("主要")]),_._v("提供两种调度器类型，你可以通过 "),v("code",[_._v("#[tokio::main]")]),_._v("宏的 "),v("code",[_._v("flavor")]),_._v(" 参数来选择：")]),_._v(" "),v("ol",[v("li",[v("p",[v("strong",[_._v("多线程调度器 (Multi-Threaded Scheduler): "),v("code",[_._v('flavor = "multi_thread"')])])]),_._v(" "),v("ul",[v("li",[_._v("这是 "),v("strong",[_._v("默认")]),_._v(" 的调度器，也是 Tokio 功能最强大的调度器。当你写 "),v("code",[_._v("#[tokio::main]")]),_._v(" 而不加任何参数时，用的就是它。")]),_._v(" "),v("li",[v("strong",[_._v("设计目标：")]),_._v(" 主要用于需要高并发的网络服务器等场景，旨在最大化利用多核 CPU 的并行处理能力。")])]),_._v(" "),v("p",[v("strong",[_._v("它的核心工作机制是 “工作窃取” (Work-Stealing)：")])]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("线程池 (Worker Threads):")]),_._v(" 运行时会创建一个线程池，通常线程数量等于机器的 CPU 核心数。每个线程都是一个“工作者 (Worker)”。")]),_._v(" "),v("li",[v("strong",[_._v("本地就绪队列 (Per-Worker Local Ready Queue):")]),_._v(" 每个工作者线程都有"),v("strong",[_._v("自己专属")]),_._v("的一个任务队列。当一个任务 A (正在这个工作者上运行) 通过 "),v("code",[_._v("tokio::spawn")]),_._v(" 派生出一个新的任务 B 时，任务 B 会被优先放入这个工作者自己的本地队列里。")]),_._v(" "),v("li",[v("strong",[_._v("工作流程：")]),_._v(" "),v("ol",[v("li",[_._v("每个工作者线程会优先从自己的"),v("strong",[_._v("本地队列")]),_._v("的前端取出任务并执行。这非常快，因为"),v("strong",[_._v("没有")]),_._v("跨线程的锁竞争。")]),_._v(" "),v("li",[v("strong",[_._v("“窃取”发生：")]),_._v(" 当一个工作者（比如 W1）完成了自己本地队列的所有任务后，它不会闲下来。它随机地选择另一个工作者（比如 W2）从 W2 的本地队列的"),v("strong",[_._v("尾部")]),_._v("“偷”走一半的任务，放到自己的队列里来执行。")])])]),_._v(" "),v("li",[v("strong",[_._v("为什么“偷”尾部的？")]),_._v(" "),v("ul",[v("li",[_._v("工作者自己总是从队列"),v("strong",[_._v("头部")]),_._v("取任务。")]),_._v(" "),v("li",[_._v("小偷从队列"),v("strong",[_._v("尾部")]),_._v("偷任务。")]),_._v(" "),v("li",[_._v("这种“头取尾偷”的模式大大减少了同一个队列两端发生锁竞争的可能性，提高了效率。")])])]),_._v(" "),v("li",[v("strong",[_._v("全局注入队列 (Global Injection Queue):")]),_._v(" 还有一个全局的任务队列，用于接收从运行时外部（例如，从一个非 Tokio 管理的线程）派生出来的任务。工作者在本地队列为空时，也会尝试从这个全局队列里获取任务。")])])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("当前线程调度器 (Current-Thread Scheduler): "),v("code",[_._v('flavor = "current_thread"')])])]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("设计目标：")]),_._v(" 用于不需要多线程并行的场景，例如构建客户端应用、嵌入式环境或测试。它的开销更小，因为没有跨线程同步的复杂性。")]),_._v(" "),v("li",[v("strong",[_._v("工作机制：")]),_._v(" "),v("ul",[v("li",[_._v("它只在"),v("strong",[_._v("调用它的那个线程")]),_._v("上运行一个事件循环。")]),_._v(" "),v("li",[_._v("所有任务都在这一个线程上被调度和执行。")]),_._v(" "),v("li",[_._v("因为它不涉及多线程，所以它内部的数据结构更简单，没有工作窃取的逻辑，性能开销也更低。")])])])])])]),_._v(" "),v("p",[_._v("所以这个异步运行时更多的是流水的任务，铁打的线程")]),_._v(" "),v("h4",{attrs:{id:"提问-loop-async-op-会不会导致线程池被占用完"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#提问-loop-async-op-会不会导致线程池被占用完"}},[_._v("#")]),_._v(" 提问： "),v("code",[_._v("loop { async_op(); }")]),_._v(" 会不会导致线程池被占用完？")]),_._v(" "),v("p",[v("strong",[_._v("答案是：它不会导致线程池被“任务”占用完，但它会导致一个 CPU 核心被 100% 占用，从而“饿死”该线程上所有其他的任务，使程序失去响应。")])]),_._v(" "),v("ol",[v("li",[v("p",[v("strong",[v("code",[_._v("async fn")]),_._v(" 只是创建了一个 "),v("code",[_._v("Future")])])]),_._v(" "),v("ul",[v("li",[_._v("当定义一个 "),v("code",[_._v("async fn async_op()")]),_._v(" 时，实际上是在定义一个函数，这个函数的返回值是一个实现了 "),v("code",[_._v("Future")]),_._v(" trait 的"),v("strong",[_._v("状态机结构体")]),_._v("。")]),_._v(" "),v("li",[_._v("调用 "),v("code",[_._v("async_op()")]),_._v(" "),v("strong",[_._v("仅仅是创建了这个结构体的实例")]),_._v("。它"),v("strong",[_._v("不会")]),_._v("执行函数体内的任何代码。")])])]),_._v(" "),v("li",[v("p",[v("strong",[v("code",[_._v(".await")]),_._v(" 才是执行的驱动力")])]),_._v(" "),v("ul",[v("li",[_._v("只有当你对一个 "),v("code",[_._v("Future")]),_._v(" 使用 "),v("code",[_._v(".await")]),_._v(" 时，你才是在告诉 Tokio 的调度器：“请开始执行这个‘计划’，如果它还没准备好（比如在等网络数据），就先暂停它，去做点别的事，等它感兴趣的事件到了在唤醒”")]),_._v(" "),v("li",[v("code",[_._v(".await")]),_._v(" 是一个让出点 (yield point)，它将执行控制权交还给调度器。")])])])]),_._v(" "),v("p",[v("strong",[_._v("分析代码 "),v("code",[_._v("loop { async_op(); }")])])]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("第一步：")]),_._v(" 循环开始，"),v("code",[_._v("async_op()")]),_._v(" 被调用。这在内存中创建了一个 "),v("code",[_._v("Future")]),_._v(" 对象。")]),_._v(" "),v("li",[v("strong",[_._v("第二步：")]),_._v(" 这个 "),v("code",[_._v("Future")]),_._v(" 对象没有被 "),v("code",[_._v("await")]),_._v("，也没有被 "),v("code",[_._v("spawn")]),_._v("。")]),_._v(" "),v("li",[v("strong",[_._v("第三步：")]),_._v(" 循环立即进入下一次迭代。在上一次迭代中创建的那个 "),v("code",[_._v("Future")]),_._v(" 对象因为超出了作用域，被立即"),v("strong",[_._v("销毁 (dropped)")]),_._v("。")]),_._v(" "),v("li",[v("strong",[_._v("第四步：")]),_._v(" 循环回到第一步，不断重复“创建然后立即销毁”这个过程。")])]),_._v(" "),v("p",[v("strong",[_._v("结论和后果：")])]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("没有异步操作发生：")]),_._v(" "),v("code",[_._v("async_op")]),_._v(" 函数体内的任何代码（比如网络请求、文件读写）都"),v("strong",[_._v("永远不会被执行")]),_._v("，因为它从未 "),v("code",[_._v(".await")])]),_._v(" "),v("li",[v("strong",[_._v("没有任务提交给线程池：")]),_._v(" 没有使用 "),v("code",[_._v("tokio::spawn")]),_._v("，所以没有向 Tokio 的调度器提交任何新的任务。线程池里的任务数量没有增加。")]),_._v(" "),v("li",[v("strong",[_._v("主任务阻塞了工作线程：")]),_._v(" "),v("code",[_._v("main")]),_._v(" 函数本身就是一个异步任务，它运行在 Tokio 的一个工作线程上。 "),v("code",[_._v("loop")]),_._v(" 这个循环里没有任何 "),v("code",[_._v(".await")]),_._v("，所以它永远不会把控制权交还给调度器。")]),_._v(" "),v("li",[v("strong",[_._v("结果：")]),_._v(" 运行 "),v("code",[_._v("main")]),_._v(" 任务的那个工作线程会陷入这个无限循环，导致其所在的 "),v("strong",[_._v("CPU 核心使用率飙升到 100%")]),_._v("。这个线程再也无法去执行调度器分配给它的任何其他任务。")])]),_._v(" "),v("p",[v("strong",[_._v("note：")]),_._v("\nspawn 这个动作本身是非常轻量级的，它基本上就是一次内存分配和一次入队操作。")]),_._v(" "),v("ul",[v("li",[_._v("接收一个 Future（也就是一个 async 代码块或 async fn 的返回值）。")]),_._v(" "),v("li",[_._v("将这个 Future 包装成一个可执行的单元 Task。")]),_._v(" "),v("li",[_._v("将这个 Task 提交给 Tokio 的调度器，让调度器把它放入一个就绪队列中。")]),_._v(" "),v("li",[_._v("立即返回一个 JoinHandle，可以用它来等待这个 Task 完成（通过 .await）或中止它。")])]),_._v(" "),v("h4",{attrs:{id:"提问-如何决定一个-task-加入哪个线程的调度队列"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#提问-如何决定一个-task-加入哪个线程的调度队列"}},[_._v("#")]),_._v(" 提问： 如何决定一个 Task 加入哪个线程的调度队列？")]),_._v(" "),v("p",[_._v("首先，#[tokio::main] 宏会启动 Tokio 运行时，并将 async fn main 函数体作为第一个任务，放到其中一个工作线程（Worker Thread）上去执行。所以，从 async main 函数开始，代码就已经运行在一个 Tokio 的工作线程上了，而不是传统意义上的操作系统“主线程”。")]),_._v(" "),v("p",[_._v("spawn 的行为取决于调用 spawn 的代码当前正在哪个线程上运行。\n决策逻辑")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("场景一（最常见）：在 Tokio 工作线程内部调用 spawn")]),_._v(" "),v("p",[_._v("假设 async main 正在工作线程 W1 上运行。\n当在 main 函数里调用 tokio::spawn(my_new_task) 时，这个 spawn 调用本身就是在 W1 上执行的。")]),_._v(" "),v("p",[_._v("Tokio 的调度器知道当前代码是在 W1 上运行的。因此，它会把 my_new_task 这个新任务放入 W1 自己的本地就绪队列 (Local Ready Queue) 中。")]),_._v(" "),v("p",[_._v("将任务放入本地队列完全不需要任何跨线程的锁或同步，速度极快。这最大化了数据的“亲和性”，新创建的任务很可能马上就会被同一个线程执行。（thread_local）")]),_._v(" "),v("ul",[v("li",[_._v("嵌套 spawn 的情况\n继续上面的例子，假设 W1 后来开始执行 my_new_task。\n在 my_new_task 内部，调用 tokio::spawn(another_task)。\n此时，spawn 调用仍然是在 W1 上执行的（因为 my_new_task 正在 W1 上运行）。\n因此，another_task 也会被放入 W1 的本地队列。")]),_._v(" "),v("li",[_._v("工作窃取 (Work-Stealing)\n现在，假设 W1 的本地队列里堆积了很多任务（main 剩下的部分, my_new_task, another_task...），而另一个工作线程 W2 已经完成了它自己本地队列的所有任务，现在处于空闲状态。\nW2 不会闲着，它会尝试从 W1 本地队列的尾部“偷”走一半的任务，放到它自己的本地队列中。\n此时，another_task 可能就被 W2 偷走了。\n现在，W2 开始执行 another_task。如果 another_task 内部又调用了 tokio::spawn(final_task)，那么这次 spawn 调用就是在 W2 上执行的，所以 final_task 会被放入 W2 的本地队列。")])])]),_._v(" "),v("li",[v("p",[_._v("场景二：在 Tokio 运行时外部调用 spawn")]),_._v(" "),v("p",[_._v("这种情况比较少见，但也是存在的。比如有一个由 "),v("code",[_._v("std::thread::spawn")]),_._v(" 创建的标准库线程，想从这个线程向 Tokio 运行时提交一个任务。\n当从这个外部线程调用 tokio::spawn 时，Tokio 调度器检测到不在任何一个工作线程的上下文里\n在这种情况下，新任务会被放入一个全局注入队列 (Global Injection Queue)。\n所有工作线程（W1, W2 等）在处理完自己的本地任务后，都会去这个全局队列里检查是否有新任务，并把它们拿到自己的本地队列来执行。")])])]),_._v(" "),v("h4",{attrs:{id:"join-的场景-有助于理解底层的唤醒"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#join-的场景-有助于理解底层的唤醒"}},[_._v("#")]),_._v(" join 的场景（有助于理解底层的唤醒）")]),_._v(" "),v("p",[_._v("假设当前任务正在执行这段代码：\n"),v("code",[_._v("let (res1, res2) = tokio::join!(fut1, fut2);")])]),_._v(" "),v("ol",[v("li",[v("p",[v("strong",[_._v("调度器 "),v("code",[_._v("poll")]),_._v(" 当前任务")])]),_._v(" "),v("ul",[v("li",[_._v("调度器决定执行任务。它调用任务的根 "),v("code",[_._v("Future")]),_._v(" 的 "),v("code",[_._v("poll")]),_._v(" 方法，并传入一个 "),v("code",[_._v("Context")]),_._v("（里面包含了指向这个任务的 "),v("code",[_._v("Waker")]),_._v("）。")])])]),_._v(" "),v("li",[v("p",[v("strong",[v("code",[_._v("poll")]),_._v(" 链式传递")])]),_._v(" "),v("ul",[v("li",[_._v("这个 "),v("code",[_._v("poll")]),_._v(" 调用会沿着 "),v("code",[_._v("async")]),_._v(" 代码的逻辑往下走，最终到达 "),v("code",[_._v("join!")]),_._v(" 宏生成的那个 "),v("code",[_._v("JoinFuture")]),_._v("。"),v("code",[_._v("JoinFuture")]),_._v(" 的 "),v("code",[_._v("poll")]),_._v(" 方法被调用，它收到了那个"),v("strong",[_._v("代表整个任务的 "),v("code",[_._v("Context")])]),_._v("。")])])]),_._v(" "),v("li",[v("p",[v("strong",[v("code",[_._v("JoinFuture")]),_._v(" 代理 "),v("code",[_._v("poll")])])]),_._v(" "),v("ul",[v("li",[v("code",[_._v("JoinFuture")]),_._v(" 的工作是轮询它的子 "),v("code",[_._v("Future")]),_._v("。它首先调用 "),v("code",[_._v("fut1.poll()")]),_._v("，并且将它收到的"),v("strong",[_._v("同一个 "),v("code",[_._v("Context")])]),_._v(" 原封不动地传递给 "),v("code",[_._v("fut1")]),_._v("。")])])]),_._v(" "),v("li",[v("p",[v("strong",[v("code",[_._v("fut1")]),_._v(" 无法立即完成")])]),_._v(" "),v("ul",[v("li",[v("code",[_._v("fut1")]),_._v("（比如一个网络请求）发现它现在无法完成。")]),_._v(" "),v("li",[_._v("它的关键职责有两个：\n"),v("ul",[v("li",[v("strong",[_._v("A) 注册 "),v("code",[_._v("Waker")]),_._v("：")]),_._v(" 它从传递给它的 "),v("code",[_._v("Context")]),_._v(" 中取出 "),v("code",[_._v("Waker")]),_._v("。然后它告诉 Tokio 的 I/O 系统：“当这个网络连接上有事件发生时，请调用这个 "),v("code",[_._v("Waker")]),_._v("。”")]),_._v(" "),v("li",[v("strong",[_._v("B) 返回 "),v("code",[_._v("Pending")]),_._v("：")]),_._v(" 它向它的调用者（也就是 "),v("code",[_._v("JoinFuture")]),_._v("）返回 "),v("code",[_._v("Poll::Pending")]),_._v("。")])])])])]),_._v(" "),v("li",[v("p",[v("strong",[v("code",[_._v("JoinFuture")]),_._v(" 的反应")])]),_._v(" "),v("ul",[v("li",[v("code",[_._v("JoinFuture")]),_._v(" 收到 "),v("code",[_._v("fut1")]),_._v(" 返回的 "),v("code",[_._v("Pending")]),_._v("。它知道 "),v("code",[_._v("fut1")]),_._v(" 还没好。")]),_._v(" "),v("li",[_._v("它"),v("strong",[_._v("不会")]),_._v("停在这里。它会继续去 "),v("code",[_._v("poll(fut2)")]),_._v("（同样传递那个 "),v("code",[_._v("Context")]),_._v("）。")]),_._v(" "),v("li",[_._v("假设 "),v("code",[_._v("fut2")]),_._v(" 也因为类似的原因返回了 "),v("code",[_._v("Pending")]),_._v("。")])])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("任务整体挂起")])]),_._v(" "),v("ul",[v("li",[_._v("现在 "),v("code",[_._v("JoinFuture")]),_._v(" 知道它的所有子 "),v("code",[_._v("Future")]),_._v(" 都还没准备好。")]),_._v(" "),v("li",[_._v("因此，"),v("code",[_._v("JoinFuture")]),_._v(" 自己也向它的调用者（最终是调度器）返回 "),v("code",[_._v("Poll::Pending")]),_._v("。")]),_._v(" "),v("li",[_._v("调度器收到 "),v("code",[_._v("Pending")]),_._v(" 后，"),v("strong",[_._v("将当前任务从执行状态移开")]),_._v("，然后去执行其他就绪的任务。"),v("strong",[_._v("此时，当前任务陷入睡眠，被调度走，但线程本身是活跃的。")])])])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("外部事件发生")])]),_._v(" "),v("ul",[v("li",[_._v("一段时间后，"),v("code",[_._v("fut1")]),_._v(" 等待的那个网络事件发生了。")]),_._v(" "),v("li",[_._v("Tokio 的 I/O 系统被操作系统通知，它找到了之前 "),v("code",[_._v("fut1")]),_._v(" 注册的那个 "),v("code",[_._v("Waker")]),_._v("，并调用了 "),v("code",[_._v("wake()")]),_._v(" 方法。")])])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("任务重回就绪队列")])]),_._v(" "),v("ul",[v("li",[v("code",[_._v("wake()")]),_._v(" 的调用，其唯一效果就是"),v("strong",[_._v("把整个任务重新放回调度器的就绪队列")]),_._v("。")])])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("调度器再次 "),v("code",[_._v("poll")]),_._v(" 整个任务")])]),_._v(" "),v("ul",[v("li",[_._v("在未来的某个时间点，调度器从就绪队列中拿出你的任务。")]),_._v(" "),v("li",[_._v("它"),v("strong",[_._v("从头开始")]),_._v("，再次调用任务的根 "),v("code",[_._v("Future")]),_._v(" 的 "),v("code",[_._v("poll")]),_._v(" 方法，并传入一个新的 "),v("code",[_._v("Context")]),_._v("。")])])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("再次执行 "),v("code",[_._v("JoinFuture")])])]),_._v(" "),v("ul",[v("li",[v("code",[_._v("poll")]),_._v(" 的调用链再次一路向下，最终又一次到达了那个 "),v("code",[_._v("JoinFuture")]),_._v("。")]),_._v(" "),v("li",[v("code",[_._v("JoinFuture")]),_._v(" 再次 "),v("code",[_._v("poll(fut1)")]),_._v("。因为这次网络事件已经发生，"),v("code",[_._v("fut1")]),_._v(" 终于可以完成它的工作，并返回 "),v("code",[_._v("Poll::Ready(result1)")]),_._v("。")]),_._v(" "),v("li",[v("code",[_._v("JoinFuture")]),_._v(" 收到 "),v("code",[_._v("Ready")]),_._v("，将 "),v("code",[_._v("result1")]),_._v(" 存起来。然后它继续 "),v("code",[_._v("poll(fut2)")]),_._v("。如果 "),v("code",[_._v("fut2")]),_._v(" 仍然是 "),v("code",[_._v("Pending")]),_._v("，"),v("code",[_._v("JoinFuture")]),_._v(" 就会再次返回 "),v("code",[_._v("Pending")]),_._v("，整个任务再次挂起，等待下一次由 "),v("code",[_._v("fut2")]),_._v(" 的事件触发的唤醒。")])])])]),_._v(" "),v("p",[_._v("这个循环会一直持续，直到 "),v("code",[_._v("JoinFuture")]),_._v(" 发现它所有的子 "),v("code",[_._v("Future")]),_._v(" 都已经返回了 "),v("code",[_._v("Ready")]),_._v("，它才会最终向调度器返回 "),v("code",[_._v("Poll::Ready((result1, result2))")]),_._v("，任务也才得以从 "),v("code",[_._v("join!")]),_._v(" 的 "),v("code",[_._v(".await")]),_._v(" 点继续向下执行。")]),_._v(" "),v("p",[_._v("//todo 其他的补充")])])}),[],!1,null,null,null);v.default=e.exports}}]);